ext.resolveVersion = { task ->
    configure(task) {
        def retypeFile = new File("${workingDir}/retype.yml")
        def clonedFile = new File("${workingDir}/retype.yml.clone")
        def releaseTagPattern = ~/^\d+\.\d+\.\d+$/
        def releaseVersion = project.version.toString()
        def releaseLink = (releaseVersion ==~ releaseTagPattern) ? "https://github.com/bdeployteam/bdeploy/releases/tag/v${releaseVersion}" : "https://github.com/bdeployteam/bdeploy/releases"

        doFirst {
            clonedFile.text = retypeFile.text
            retypeFile.text = retypeFile.text.replace("{{ releaseVersion }}", releaseVersion).replace("{{ releaseLink }}", releaseLink)
        }
    }
}

ext.revertVersion = { task ->
    configure(task) {
        def retypeFile = new File("${workingDir}/retype.yml")
        def clonedFile = new File("${workingDir}/retype.yml.clone")

        doLast {
            retypeFile.text = clonedFile.text
            delete(clonedFile)
        }
    }
}

ext.buildRetype = { task ->
    configure(task) {
        enabled !rootProject.isAarch64()
        resolveVersion(task)
        group = BasePlugin.BUILD_GROUP
	    if (!org.gradle.internal.os.OperatingSystem.current().isWindows()) {
	        commandLine (["npx", "retypeapp", "build"])
	    } else {
	        commandLine (["npx.cmd", "retypeapp", "build"])
	    }
        revertVersion(task)
    }
}

tasks.register('retypeDevDoc', Exec) { t ->
    workingDir './retypedev'
    inputs.dir './retypedev'
    outputs.dir layout.buildDirectory.dir("docs/dev")
    buildRetype(t)
}

tasks.register('retypeUserDoc', Exec) { t ->
    workingDir './retypeuser'
    inputs.dir './retypeuser'
    outputs.dir layout.buildDirectory.dir("docs/user")
    buildRetype(t)
}

tasks.register('doc') {
    dependsOn retypeDevDoc
    dependsOn retypeUserDoc
}

tasks.register('clean') {
    delete layout.buildDirectory
}

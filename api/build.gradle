import enforcer.rules.EnforceBytecodeVersion

plugins {
  id 'eclipse'
  id 'java-library'
  id 'maven-publish'
  id 'signing'
  id 'com.gradleup.shadow' version '8.3.9'
  id "io.swagger.core.v3.swagger-gradle-plugin" version "2.2.26"
  id 'org.jreleaser' version '1.19.0'
}

dependencies {
    api(
        project(":common"),
        project(":jersey"),
        project(":bhive"),
        'io.swagger.core.v3:swagger-annotations:2.2.35',
    )
    swaggerDeps(
        'org.apache.commons:commons-lang3:3.18.0',
        'io.swagger.core.v3:swagger-jaxrs2-jakarta:2.2.35',
        'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0',
        'jakarta.servlet:jakarta.servlet-api:6.1.0'
    )
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

build.dependsOn shadowJar
build.dependsOn resolve

shadowJar {
	archiveClassifier = ''
    archiveBaseName = 'bdeploy-api'

    // make sure we have our own versions of most important/conflicting things
    relocate('com.fasterxml.jackson', 'io.bdeploy.shadow.jackson')
    relocate('com.google', 'io.bdeploy.shadow.google')
    relocate('org.glassfish', 'io.bdeploy.shadow.glassfish')
    relocate('com.ning', 'io.bdeploy.shadow.ning')
    relocate('org.apache', 'io.bdeploy.shadow.apache')
    relocate('org.jvnet', 'io.bdeploy.shadow.jvnet')

    minimize() {
        exclude(project(":jersey"))
        exclude(project(":bhive"))
    }

    mergeServiceFiles()
}

resolve {
    outputFileName = 'BDeployAPI'
    outputFormat = 'YAML'
    classpath = sourceSets.main.runtimeClasspath
    outputDir = layout.buildDirectory.dir("openapi").get().asFile
    readAllResources = false
    resourceClasses = [
        'io.bdeploy.api.remote.v1.PublicRootResource',
        'io.bdeploy.api.schema.v1.PublicSchemaResource',
        'io.bdeploy.api.validation.v1.PublicProductValidationResource',
    ]
}

enforce {
    rule(EnforceBytecodeVersion) { r ->
        r.enabled = true
        r.configurations = [ 'runtime' ]
        r.maxJdkVersion = java.targetCompatibility.getMajorVersion()
    }
}

evaluationDependsOn(':bhive')
evaluationDependsOn(':common')
evaluationDependsOn(':jersey')

tasks.register('allSourcesJar', Jar) {
    dependsOn classes
    group = 'build'
    archiveClassifier = 'sources'
    from files([project, project(":bhive"), project(":jersey"), project(":common")].collect { it.sourceSets.main.allSource })
}

tasks.register('allJavadoc', Javadoc) {
    source files([project, project(":bhive"), project(":jersey"), project(":common")].collect { it.sourceSets.main.allJava })
    classpath = files([project, project(":bhive"), project(":jersey"), project(":common")].collect { it.sourceSets.main.compileClasspath })
    destinationDir = layout.buildDirectory.dir("docs/javadoc").get().asFile;

    options.encoding = 'UTF-8'
    options.addBooleanOption('html5', true)
    options.addStringOption('Xdoclint:-missing', '-quiet')
}

tasks.register('allJavadocJar', Jar) {
    dependsOn allJavadoc
    archiveClassifier = 'javadoc'
    from allJavadoc.destinationDir
}

artifacts {
	archives allSourcesJar
	archives allJavadocJar
}

shadowJar.dependsOn allSourcesJar
shadowJar.dependsOn allJavadocJar

publishing {
	publications {
		shadow(MavenPublication) { pub ->
			project.shadow.component(pub)
			
			artifact allSourcesJar
            artifact allJavadocJar

            pom {
                name = 'BDeploy Public API'
                description = 'Public API including dependencies, ready to be used for integrations and plugins.'
                url = 'https://bdeploy.io'
                licenses {
                    license {
                        name = 'Microsoft Public License (Ms-PL)'
                        url = 'https://opensource.org/license/ms-pl-html'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/bdeployteam/bdeploy.git'
                    developerConnection = 'scm:git:git@github.com:bdeployteam/bdeploy.git'
                    url = 'https://github.com/bdeployteam/bdeploy'
                }
                developers {
                    developer {
                        id = 'mduft'
                        name = 'Markus Duft'
                    }
                    developer {
                        id = 'TheTechnolog'
                        name = 'Daniel Kargl'
                    }
                }
            }
		}
	}
	
	repositories {
		mavenLocal()
        maven {
            url = layout.buildDirectory.dir("staging-deploy").get().asFile
        }
	}
}

jreleaserDeploy.dependsOn publish

// see release.sh for which environment variables are to be set before running this task!
jreleaser {
    gitRootSearch = true

    signing {
        active = 'ALWAYS'
        armored = true
        mode = 'FILE'
    }

    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository(layout.buildDirectory.dir("staging-deploy").get().asFile.path)

                    applyMavenCentralRules = true

                    retryDelay = 30
                    maxRetries = 200
                }
            }
        }
    }
}


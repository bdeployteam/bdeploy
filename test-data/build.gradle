import okhttp3.OkHttpClient
import java.util.concurrent.TimeUnit

plugins {
    id 'base'
    id "com.github.psxpaul.execfork" version "0.2.2"
    id "jacoco"
    id "com.github.breadmoirai.github-release" version "2.5.2"
}

ext {
    testServerRoot = "${buildDir}/test-root"
    testServerHost = "localhost"
    testServerPort = 7711

    testServerRootCentral = "${buildDir}/test-root-central"
    testServerRootManaged = "${buildDir}/test-root-managed"
    testServerPortCentral = 7715
    testServerPortManaged = 7716
}

evaluationDependsOn(':minion')

int randomServerPort() {
    new ServerSocket(0).withCloseable {
        return it.getLocalPort();
    }
}

void createProductTasks(String taskName, String prod) {
    task "${taskName}" (type: Zip) {
        from fileTree(dir: "${projectDir}/${prod}")
        archiveFileName = "${prod}-direct.zip"
        destinationDirectory = file("${buildDir}/distribution/")
        inputs.dir file("${projectDir}/${prod}")
    }

    build {
        dependsOn "${taskName}"
    }
}

void setupBDeployEnv(ProcessForkOptions options, String root) {
    options.environment += [
        HOSTNAME: testServerHost,
        BDEPLOY_ROOT: root,
    ]
}

void setupBDeployRemoteEnv(ProcessForkOptions options, String root, int port) {
    setupBDeployEnv(options, root)
    options.environment += [
        BDEPLOY_REMOTE: "https://localhost:${port}/api",
        BDEPLOY_TOKENFILE: "${root}/test-token.txt",
        REMOTE_BHIVE: "Test"
    ]
}

void setupBDeployJavaExec(JavaExec je, String root, int port) {
    je.main = project(":minion").mainClassName
    je.classpath = project(":minion").sourceSets.main.runtimeClasspath
    if(root != null) {
        setupBDeployRemoteEnv(je, root, port)
    }
}

void setupProfilerAgent(com.github.psxpaul.task.JavaExecFork je, String name) {
    if(project.hasProperty("yourkitPath")) {
        def path = new File(project.getProperty("yourkitPath"));
        def profPath = null;

        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            profPath = new File(path, "bin/windows-x86-64/yjpagent.dll");
        } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            profPath = new File(path, "bin/linux-x86-64/libyjpagent.so");
        } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            profPath = new File(path, "bin/mac/libyjpagent.dylib");
        }

        je.jvmArgs += [ "-agentpath:" + profPath + "=tracing,sessionname=" + name ];
    }
}

task triggerStopBDeploy() {
    doLast {
        println("Stopped BDeploy Server")
    }
}

void createServerTasks(String name, String root, int port) {
    task "initTestBDeploy${name}"(type: JavaExec ) {
        setupBDeployJavaExec(it, root, port);

        def taskName = "";
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            taskName = "win64DistZip"
        } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            taskName = "linux64DistZip"
        } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            taskName = "mac64DistZip"
        }
        dependsOn ':minion:'+taskName

        doFirst() {
            delete "${root}"
        }

        if(name.equals("Central") || name.equals("Managed")) {
            // save some time on startup...
            args = [ "init", "--port=${port}", "--dist=ignore", "--mode=" + name, "--initUser=admin", "--initPassword=adminadminadmin" ]
        } else {
            args = [ "init", "--port=${port}", "--dist="+project(':minion').tasks[taskName].outputs.files[0], "--mode=standalone", "--initUser=admin", "--initPassword=adminadminadmin", "--pooling", "--pool=${buildDir}/test-pool" ]
        }

        mustRunAfter("externalSoftwareZip")
        mustRunAfter("externalSoftware2Zip")
        mustRunAfter("product1Zip")
        mustRunAfter("product2Zip")
        mustRunAfter("product3Zip")
    }

    task "startTestBDeploy${name}"(type: com.github.psxpaul.task.JavaExecFork, dependsOn: "initTestBDeploy${name}") {
        doNotTrackState("No State")
        setupBDeployEnv(it, root)
        setupProfilerAgent(it, "Test" + name)
        main = project(":minion").mainClassName
        classpath = project(":minion").sourceSets.main.runtimeClasspath
        args = [ "start", "--allowCors", "--consoleLog" ]
        jvmArgs += [ '-Xmx128M' ] // all tests must fit :)
        waitForPort = port
        stopAfter = triggerStopBDeploy

        mustRunAfter("initTestBDeploy${name}")
    }
}

createServerTasks("", testServerRoot, testServerPort);
task checkTestBDeploy(type: JavaExec, dependsOn: startTestBDeploy) {
    setupBDeployJavaExec(it, testServerRoot, testServerPort);
    args = [ "remote-master", "--minions" ]

    mustRunAfter(startTestBDeploy)
}

createServerTasks("Central", testServerRootCentral, testServerPortCentral);
createServerTasks("Managed", testServerRootManaged, testServerPortManaged);

startTestBDeployManaged.mustRunAfter(checkTestBDeploy)
startTestBDeployCentral.mustRunAfter(startTestBDeployManaged)


task cleanExternalSoftwareHive(type: Delete) {
    delete "${buildDir}/external-software-hive"
}

task initExtSoftwareHive(type: JavaExec, dependsOn: cleanExternalSoftwareHive) {
    setupBDeployJavaExec(it, testServerRoot, testServerPort);
    args = [ "bhive", "init", "--hive=${buildDir}/external-software-hive" ]
}

// now define the dynamic tasks for each operating system
createExternalSoftwareTasks("windows")
createExternalSoftwareTasks("linux")
// createExternalSoftwareTasks("mac")

void createExternalSoftwareTasks(String os) {
    def osUpper = os.substring(0,1).toUpperCase() + os.substring(1);
    def hive = "${buildDir}/external-software-hive";
    def source = "${projectDir}/external-software/${os}"

    task "externalSoftware${osUpper}" (type: JavaExec, dependsOn: "initExtSoftwareHive") {
        setupBDeployJavaExec(it, testServerRoot, testServerPort);
        args = [ "bhive", "import", "--hive=${hive}", "--source=${source}", "--manifest=external/software/${os}:v1.0.0" ]
    }

    build {
        dependsOn "externalSoftware${osUpper}"
    }
}

task externalSoftwareZip(type: Zip, dependsOn: [externalSoftwareWindows, externalSoftwareLinux]) {
    archiveFileName = "external-software-hive.zip"
    destinationDirectory = file("${buildDir}/distribution/")
    
    from "${buildDir}/external-software-hive"
}

// now define the dynamic tasks for each product
createProductTasks("product1Zip", "test-product-1")
createProductTasks("product2Zip", "test-product-2")
createProductTasks("product3Zip", "chat-product-1")
createProductTasks("externalSoftware2Zip","external-software-2-raw")

task releaseTest() {
    doFirst {
        // container to depend on all migration tests.
        if(project(":minion").mac64DistZip.enabled && !org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            throw new IllegalStateException("Release tests not supported with MAC support enabled right now")
        }
    }
}

task verifyBDeployExe(type: JavaExec) {
    setupBDeployJavaExec(it, null, 0);
    args = [ "verify-signature", "--executable=" + project(":launcher").projectDir + "/src/win64/dist/BDeploy.exe" ]
}

task verifyFileAssocExe(type: JavaExec) {
    setupBDeployJavaExec(it, null, 0);
    args = [ "verify-signature", "--executable=" + project(":launcher").projectDir + "/src/win64/dist/FileAssoc.exe" ]
}

task verifyInstallerBin(type: JavaExec) {
    setupBDeployJavaExec(it, null, 0);
    args = [ "verify-signature", "--executable=" + project(":launcher").projectDir + "/src/win64/dist/bin/Installer.bin" ]
}

task verifyBinaries() {
    dependsOn verifyBDeployExe
    dependsOn verifyFileAssocExe
    dependsOn verifyInstallerBin
}

task release(dependsOn: [releaseTest, verifyBinaries]) {
    doLast {
        println "Release seems to do be ok..."
    }
}

evaluationDependsOn(':api')
githubRelease {
    if(project.hasProperty('githubToken')) {
        token = project.getProperty('githubToken')
    }
    owner = "bdeployteam"
    repo = "bdeploy"
    tagName = "v${version}"
    releaseName = "Release ${version}"
    targetCommitish = "master"

    releaseAssets.from(project(":minion").linux64DistZip)
    releaseAssets.from(project(":minion").win64DistZip)
    releaseAssets.from(project(":api").shadowJar)
    releaseAssets.from(fileTree(project(":api").resolve.outputDir))
    releaseAssets.from(project(":test-data").product1Zip)
    releaseAssets.from(project(":test-data").product2Zip)
    releaseAssets.from(project(":test-data").product3Zip)

    // increase read and write timeouts as the files are rather large :)
    client new OkHttpClient.Builder().readTimeout(10, TimeUnit.MINUTES).writeTimeout(10, TimeUnit.MINUTES).build();
}

// coverage for the rest of the tasks
jacoco {
    applyTo initTestBDeploy
    applyTo checkTestBDeploy
    if(!project.hasProperty('yourkitPath')) {
        applyTo startTestBDeploy
        applyTo startTestBDeployCentral
        applyTo startTestBDeployManaged
    }
}

// now all tasks that depend on any of the generated tasks
task setupDemoServer() {
    dependsOn checkTestBDeploy
    dependsOn startTestBDeployCentral
    dependsOn startTestBDeployManaged

    doFirst() {
        println("----------------------------------------------------------------------------------------")
        println("Successfully started demo server. Point your browser to:")
        println("  https://localhost:${testServerPort} - STANDALONE Demo Server")
        if(!project.hasProperty('cypressNoCentral')) {
            println("  https://localhost:${testServerPortCentral} - CENTRAL Demo Server")
            println("  https://localhost:${testServerPortManaged} - MANAGED Demo Server")
        }
        println("User and password for the demo server(s) are 'admin' and 'admin'.")
        println("NOTE: that cookies are hostname based, so logging in to one will log out on any other");
        println("      server running on the same hostname.");
        println("----------------------------------------------------------------------------------------")
    }
}

task runDemoServer(dependsOn: setupDemoServer) {
    doLast() {
        // no println will work in doLast, it will appear only AFTER the question is answered.
        def userInput = services.get(org.gradle.api.internal.tasks.userinput.UserInputHandler)
        def answer = userInput.askUser(i -> i.askQuestion("Enter any value (or press enter) to stop the server", "Stop")).getOrNull();
    }
}

